// Copyright (c) 2020 InfraCloud Technologies
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

/*
 * Microsoft Bot Connector API - v3.0
 *
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    Â© 2016 Microsoft
 *
 * API version: v3
 * Contact: botframework@microsoft.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package schema

import (
	"time"
)

// Activity - An Activity is the basic communication type for the Bot Framework 3.0 protocol.
type Activity struct {
	Type ActivityTypes `json:"type,omitempty"`

	// Contains an ID that uniquely identifies the activity on the channel.
	ID string `json:"id,omitempty"`

	// Contains the date and time that the message was sent, in UTC, expressed in ISO-8601 format.
	Timestamp time.Time `json:"timestamp,omitempty"`

	// Contains the local date and time of the message, expressed in ISO-8601 format.  For example, 2016-09-23T13:07:49.4714686-07:00.
	LocalTimestamp time.Time `json:"localTimestamp,omitempty"`

	// Contains the name of the local timezone of the message, expressed in IANA Time Zone database format.  For example, America/Los_Angeles.
	LocalTimezone string `json:"localTimezone,omitempty"`

	// A string containing an IRI identifying the caller of a bot. This field is not intended to be transmitted  over the wire, but is instead populated by bots and clients based on cryptographically verifiable data  that asserts the identity of the callers (e.g. tokens).
	CallerID string `json:"callerId,omitempty"`

	// Contains the URL that specifies the channel's service endpoint. Set by the channel.
	ServiceURL string `json:"serviceUrl,omitempty"`

	// Contains an ID that uniquely identifies the channel. Set by the channel.
	ChannelID string `json:"channelId,omitempty"`

	From ChannelAccount `json:"from,omitempty"`

	Conversation ConversationAccount `json:"conversation,omitempty"`

	Recipient ChannelAccount `json:"recipient,omitempty"`

	TextFormat TextFormatTypes `json:"textFormat,omitempty"`

	AttachmentLayout AttachmentLayoutTypes `json:"attachmentLayout,omitempty"`

	// The collection of members added to the conversation.
	MembersAdded []ChannelAccount `json:"membersAdded,omitempty"`

	// The collection of members removed from the conversation.
	MembersRemoved []ChannelAccount `json:"membersRemoved,omitempty"`

	// The collection of reactions added to the conversation.
	ReactionsAdded []MessageReaction `json:"reactionsAdded,omitempty"`

	// The collection of reactions removed from the conversation.
	ReactionsRemoved []MessageReaction `json:"reactionsRemoved,omitempty"`

	// The updated topic name of the conversation.
	TopicName string `json:"topicName,omitempty"`

	// Indicates whether the prior history of the channel is disclosed.
	HistoryDisclosed bool `json:"historyDisclosed,omitempty"`

	// A locale name for the contents of the text field.  The locale name is a combination of an ISO 639 two- or three-letter culture code associated with a language  and an ISO 3166 two-letter subculture code associated with a country or region.  The locale name can also correspond to a valid BCP-47 language tag.
	Locale string `json:"locale,omitempty"`

	// The text content of the message.
	Text string `json:"text,omitempty"`

	// The text to speak.
	Speak string `json:"speak,omitempty"`

	InputHint InputHints `json:"inputHint,omitempty"`

	// The text to display if the channel cannot render cards.
	Summary string `json:"summary,omitempty"`

	SuggestedActions SuggestedActions `json:"suggestedActions,omitempty"`

	// Attachments
	Attachments []Attachment `json:"attachments,omitempty"`

	// Represents the entities that were mentioned in the message.
	Entities []Entity `json:"entities,omitempty"`

	// Contains channel-specific content.
	ChannelData map[string]interface{} `json:"channelData,omitempty"`

	// Indicates whether the recipient of a contactRelationUpdate was added or removed from the sender's contact list.
	Action string `json:"action,omitempty"`

	// Contains the ID of the message to which this message is a reply.
	ReplyToID string `json:"replyToId,omitempty"`

	// A descriptive label for the activity.
	Label string `json:"label,omitempty"`

	// The type of the activity's value object.
	ValueType string `json:"valueType,omitempty"`

	// A value that is associated with the activity.
	Value map[string]interface{} `json:"value,omitempty"`

	// The name of the operation associated with an invoke or event activity.
	Name string `json:"name,omitempty"`

	RelatesTo ConversationReference `json:"relatesTo,omitempty"`

	Code EndOfConversationCodes `json:"code,omitempty"`

	// The time at which the activity should be considered to be \"expired\" and should not be presented to the recipient.
	Expiration time.Time `json:"expiration,omitempty"`

	Importance ActivityImportance `json:"importance,omitempty"`

	DeliveryMode DeliveryModes `json:"deliveryMode,omitempty"`

	// List of phrases and references that speech and language priming systems should listen for
	ListenFor []string `json:"listenFor,omitempty"`

	// The collection of text fragments to highlight when the activity contains a ReplyToId value.
	TextHighlights []TextHighlight `json:"textHighlights,omitempty"`

	SemanticAction SemanticAction `json:"semanticAction,omitempty"`
}
